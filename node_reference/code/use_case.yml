  <use_case>
  - 他のノードの変数をコードノードで使用する必要がある場合は、入力変数で変数名を定義し、これらの変数を参照する必要があります。
  - 変数はnodeにvariablesで指定される
    - variablesの数は不定、1個でも10個でも設定はできる
    - variablesの値はArray,String,Intなど、元のNodeで設定されるためPython側で指定はできない
  - 実行結果はoutputsのresultに格納される
  - 実行結果はresultという名前で次のノードに渡す
    - outputは必ずdictの形で返却する
    - 返却するdictのkeyはresult,result1,result2...となる
    - 返却するdictのvalueはstringかintのみ
  - ライブラリは全て利用不可能
    - ファイルの読み込みはできない
  - ワークフローでは、しばしば非構造化データの処理が必要です。例えば、JSON文字列の解析、抽出、変換などです。典型的な例として、HTTPノードのデータ処理があります。一般的なAPI応答構造では、データが多層のJSONオブジェクトにネストされていることがあり、特定のフィールドを抽出する必要があります。コードノードはこれらの操作を支援します。以下は、HTTPノードから返されたJSON文字列からdata.nameフィールドを抽出する簡単な例です：
```python
def main(http_response: str) -> str:
    import json
    data = json.loads(http_response)
    return {
        # 出力変数にresultを宣言することに注意
        'result': data['data']['name']
    }
```
  - 数学計算 ワークフロー内で複雑な数学計算を行う必要がある場合、コードノードを使用できます。例えば、複雑な数学公式の計算やデータの統計分析です。以下は、配列の平方差を計算する簡単な例です：
```python
def main(x： list)-> float:.
    return {
        # 出力変数にresultを宣言することに注意
        'result': sum([(i - sum(x) / len(x)) ** 2 for i in x]) / len(x)
    }
```
  - データの結合
時には、複数のデータソースを結合する必要がある場合があります。例えば、複数の知識検索、データサーチ、API呼び出しなどです。コードノードはこれらのデータソースを統合するのに役立ちます。以下は、2つのナレッジベースのデータを結合する簡単な例です：
```python
def main(knowledge1： list, knowledge2： list)-> list:.
  return {
    #出力変数に結果を宣言することに注意。
    'result':knowledge1+knowledge2
  }
```
  - 利用可能なライブラリ
    - json
  - 利用不可できないライブラリ
    - numpy
    - pandas
    - boto3
    - requests
    - openai
    - google-*
    - その他全て
  - 利用して良いライブラリはjsonだけです、他のライブラリは使えません、必要があれば自分でコードを書いてください
  </use_case>

