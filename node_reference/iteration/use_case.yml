  <use_case>
  - 機能:配列に対して複数のステップを実行し、すべての結果を出力すること。
  - iteration-start ノードと一緒に利用しなければならない
  - イテレーションステップはリスト中の各項目に対して同じステップを実行します。イテレーションを使用する条件は、入力値がリストオブジェクトとしてフォーマットされていることを確認することです。イテレーションノードは、AIワークフローにより複雑な処理ロジックを取り入れることを可能にします。

  - 機能の原理
    - イテレーションを使用する条件は、入力値がリストオブジェクトとしてフォーマットされていることを確認することです。イテレーションノードは、イテレーションの開始ノードにある配列変数内のすべての要素を順番に処理し、各要素は同じ処理手順に従います。各処理ラウンドはイテレーションと呼ばれ、最終的な処理結果が出力されます。
    - イテレーションノードの構造には、通常、入力変数、イテレーションワークフロー、出力変数の3つの機能ユニットが含まれています。
    - 入力変数：Array配列変数タイプのデータのみを受け入れます。配列変数が何であるかわからない場合は、「配列変数とは何ですか？」をお読みください。
    - イテレーションワークフロー：イテレーションノード内で複数のワークフローノードを使用し、さまざまなタスクステップを編成できます。
    - 出力変数：出力はArray配列変数のみをサポートしています。

  - 配列変数とは何ですか？
    - 配列変数は特定のデータ型で、通常は複数の要素を持っています。要素はカンマで区切られ、[から始まり、]で終わります。以下にいくつかの例を示します：
    - 数字型： [0, 1, 2, 3, 4, 5]
    - 文字列型： ["monday", "Tuesday", "Wednesday", "Thursday"]
    - JSONオブジェクト： [ { "name": "Alice", "age": 30, "email": "alice@example.com" }, { "name": "Bob", "age": 25, "email": "bob@example.com" }, { "name": "Charlie", "age": 35, "email": "charlie@example.com" } ]
  - イテレーションノードの入力変数として機能する配列変数を生成するには
    - code ノードを利用して python の出力を
    return { "result": ["monday", "Tuesday", "Wednesday", "Thursday"] }
    とすることで、イテレーションは ["monday", "Tuesday", "Wednesday", "Thursday"] を入力としてうけとることができます
    - このように出力されたものをイテレーションノードの入力変数として利用することができる
    - 埋め込み変数として item, index が利用できます。
  - イテレーションノードの出力
    - イテレーションノードの出力変数は配列形式であり、直接Stringとして出力することはできません。
      配列をテキストに戻すためには code ノードでイテレーションノードの出力を受け取り、
      例： イテレーション内でブログ記事を各セクションごとに生成して、それをテキストに変換する
      def main(articleSections: list):
          data = articleSections
          return {
              "result": "\n".join(data)
          }      
      とすることで、イテレーションノードの出力をテキストに変換することができます。
  - シナリオ
    -  例1：長文イテレーション生成器
       - 開始ノード にストーリーのタイトルと変数を入力して、ユーザーに初期情報を手動で入力するよう求めます。
       - LLMノード を使用してユーザー入力から完全な内容を抽出
       - パラメータ抽出ノード を使用して完全な内容を配列形式に変換
       - イテレーションノード でラップされた LLM ノード を通じて各章の内容を複数回生成
       - イテレーションノード内に 直接応答ノード を追加して、各イテレーション生成の後にストリーム出力を行う
    - イテレーションノードの設定
      - LLM ノード内で入力変数 GenerateOverallOutline/output と Iteration/item を設定
    - イテレーションの組み込み変数：items[object] と index[number]
      - items[object] は各イテレーションの入力項目を表します；
      - index[number] は現在のイテレーションのラウンドを表します；
      - イテレーションノード内に 直接応答ノード を設定して、各イテレーション生成の後にストリーム出力を実現。
  </use_case>


